service:
  name: serverless-todo-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-aws-documentation

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-central-1'}

  environment:
    TODO_TABLE: Todo-${self:provider.stage}
    INDEX_NAME: Todo-Index-${self:provider.stage}

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # TODO: Configure this function
  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          cors: true

    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODO_TABLE}

  # TODO: Configure this function
  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a todo item
            description: Create a todo item
            requestModels:
              'application/json': TodoRequest

    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODO_TABLE}

#  # TODO: Configure this function
#  UpdateTodo:
#    handler: src/lambda/http/updateTodo.handler
#    events:
#      - http:
#          method: patch
#          path: todos/{todoId}
#
#  # TODO: Configure this function
#  DeleteTodo:
#    handler: src/lambda/http/deleteTodo.handler
#    events:
#      - http:
#          method: delete
#          path: todos/{todoId}
#
#  # TODO: Configure this function
#  GenerateUploadUrl:
#    handler: src/lambda/http/generateUploadUrl.handler
#    events:
#      - http:
#          method: post
#          path: todos/{todoId}/attachment

custom:

  serverless-offline:
    port: 3003

  dynamodb:
    stages:
      - ${self:provider.stage}
    start:
      port: 8000
      inMemory: true
      migrate: true

  documentation:
    api:
      info:
        version: v1.0.0
        title: TODO API
        description: Serverless application for todo lists
    models:
      - name: TodoRequest
        contentType: application/json
        schema: ${file(models/create-todo-request.json)}

resources:
  Resources:
    TodoDynamoDBTable:
      Type: AWS::DynamoDB::Table
        Properties:
          AttributeDefinitions:
              - AttributeName: partitionKey
                AttributeType: S
                  - AttributeName: sortKey
                    AttributeType: S
                  - AttributeName: indexKey
                    AttributeType: S
          KeySchema:
            - AttributeName: partitionKey
              KeyType: HASH
            - AttributeName: sortKey
              KeyType: RANGE
          BillingMode: PAY_PER_REQUEST
          TableName: ${self:provider.environment.TODO_TABLE}
          LocalSecondaryIndexes:
            - IndexName: ${self:provider.environment.INDEX_NAME}
              KeySchema:
                - AttributeName: partitionKey
                  KeyType: HASH
                - AttributeName: indexKey
                  KeyType: RANGE
              Projection:
                ProjectionType: ALL # What attributes will be copied to an index



    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false
