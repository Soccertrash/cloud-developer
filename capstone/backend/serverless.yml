service:
  name: serverless-photogallery-app

plugins:
  - serverless-webpack
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
  - serverless-plugin-canary-deployments
  - serverless-iam-roles-per-function
  - serverless-dynamodb-local
  - serverless-offline

# Uncomment to enable individual packaging
# package:
#   individually: true

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-central-1'}
#
#  tracing:
#    lambda: true
#    apiGateway: true

  environment:
    TABLE_ALBUMS: Albums-${self:provider.stage}
    TABLE_IMAGES: Images-${self:provider.stage}
    _X_AMZN_TRACE_ID: TRACE_LOCAL-${self:provider.stage}



custom:
  serverless-offline:
    port: 3003

  dynamodb:
    stages:
      - ${self:provider.stage}
    start:
      port: 8000
      inMemory: true
      migrate: true

  documentation:
    api:
      info:
        version: v1.0.0
        title: Photo gallery API
        description: Serverless application for image storage
    models:
      - name: CreateAlbumRequest
        contentType: application/json
        schema: ${file(models/create-album-request.json)}
#      - name: ImageRequest
#        contentType: application/json
#        schema: ${file(models/create-image-request.json)}

functions:

#  RS256Auth:
#    handler: src/lambda/auth/rs256Auth0Authorizer.handler
#
#  Auth:
#    handler: src/lambda/auth/auth0Authorizer.handler

  GetAlbums:
    handler: src/lambda/http/getAlbums.handler
    events:
      - http:
          method: get
          path: album
          cors: true

  GetSingleAlbum:
    handler: src/lambda/http/getSingleAlbum.handler
    events:
      - http:
          method: get
          path: album/{albumId}
          cors: true

  CreateAlbum:
    handler: src/lambda/http/createAlbum.handler
    events:
      - http:
          method: put
          path: album
          #authorizer: Auth
          #cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create an album
            description: Create an album
            requestModels:
              'application/json': CreateAlbumRequest



resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    AlbumTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TABLE_ALBUMS}

    ImageTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: albumIdUserId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: albumIdUserId
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TABLE_IMAGES}


