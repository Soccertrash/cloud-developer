service:
  name: serverless-photogallery-app

plugins:
  - serverless-webpack
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
  - serverless-plugin-canary-deployments
  - serverless-iam-roles-per-function
  - serverless-dynamodb-local
  - serverless-offline

# Uncomment to enable individual packaging
# package:
#   individually: true

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-central-1'}
#
#  tracing:
#    lambda: true
#    apiGateway: true

  environment:
    TABLE_ALBUMS: Albums-${self:provider.stage}
    TABLE_ALBUMS_SEC_INDEX: Albums-Sec-Idx-${self:provider.stage}
    TABLE_IMAGES: Images-${self:provider.stage}
    TABLE_IMAGES_SEC_INDEX: Images-Sec-Idx-${self:provider.stage}
    IMAGES_S3_BUCKET: gallery-soccertrash-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    _X_AMZN_TRACE_ID: TRACE_LOCAL-${self:provider.stage}



custom:
  serverless-offline:
    httpPort: 3003

  dynamodb:
    stages:
      - ${self:provider.stage}
    start:
      port: 8000
      inMemory: true
      migrate: true

  documentation:
    api:
      info:
        version: v1.0.0
        title: Photo gallery API
        description: Serverless application for image storage
    models:
      - name: CreateAlbumRequest
        contentType: application/json
        schema: ${file(models/create-album-request.json)}
#      - name: ImageRequest
#        contentType: application/json
#        schema: ${file(models/create-image-request.json)}

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetAlbums:
    handler: src/lambda/http/getAlbums.handler
    events:
      - http:
          method: get
          path: album
          authorizer: Auth
          cors: true

  GetSingleAlbum:
    handler: src/lambda/http/getSingleAlbum.handler
    events:
      - http:
          method: get
          path: album/{albumId}
          authorizer: Auth
          cors: true

  CreateAlbum:
    handler: src/lambda/http/createAlbum.handler
    events:
      - http:
          method: put
          path: album
          authorizer: Auth
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create an album
            description: Create an album
            requestModels:
              'application/json': CreateAlbumRequest

  DeleteAlbum:
    handler: src/lambda/http/deleteAlbum.handler
    events:
      - http:
          method: delete
          path: album/{albumId}
          authorizer: Auth
          cors: true

  GenUploadUrl:
    handler: src/lambda/http/requestUploadUrlImage.handler
    events:
      - http:
          method: post
          path: /album/{albumId}/image
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:*
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TABLE_IMAGES}



resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    AlbumTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: albumId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: albumId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TABLE_ALBUMS}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.TABLE_ALBUMS_SEC_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    ImageTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userAlbumId
            AttributeType: S
          - AttributeName: imageId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: userAlbumId
            KeyType: HASH
          - AttributeName: imageId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TABLE_IMAGES}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.TABLE_IMAGES_SEC_INDEX}
            KeySchema:
              - AttributeName: userAlbumId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL


